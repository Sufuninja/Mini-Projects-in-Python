###??????????????????????????????????????????????????????###
# Implementation of classic arcade game Pong               #
# CONTROLS PLR 1: 'w'key=up, 's'key=down       _______     #
# CONTROLS PLR 2: 'up arrow', 'down arrow'    /_PONG__/    #
#                                                          #
###??????????????????????????????????????????????????????###
import simplegui
import random

# initialize globals - pos and vel encode vertical info for paddles
WIDTH = 600
HEIGHT = 400       
BALL_RADIUS = 20
PAD_WIDTH = 8
PAD_HEIGHT = 80
HALF_PAD_WIDTH = PAD_WIDTH / 2
HALF_PAD_HEIGHT = PAD_HEIGHT / 2
ball_pos = [WIDTH / 2, HEIGHT / 2]
ball_vel = [0, 0]
paddle1_top = [HALF_PAD_WIDTH, (HEIGHT / 2 + PAD_HEIGHT / 2)]
paddle1_bottom =[HALF_PAD_WIDTH, (HEIGHT / 2 - PAD_HEIGHT / 2)]
paddle2_top = [WIDTH - HALF_PAD_WIDTH, (HEIGHT / 2 + PAD_HEIGHT / 2)]
paddle2_bottom = [WIDTH -HALF_PAD_WIDTH,(HEIGHT / 2 - PAD_HEIGHT / 2)]
paddle1_pos = [paddle1_top[1], paddle1_bottom[1]]
paddle2_pos = [paddle2_top[1], paddle2_bottom[1]]
paddle1_vel = 0
paddle2_vel = 0
RIGHT = False
LEFT = True

# initialize ball_pos and ball_vel for new bal in middle of table
# if direction is RIGHT, the ball's velocity is upper right, else upper left
def spawn_ball(direction):
    global ball_vel, RIGHT, LEFT, ball_pos
    ball_pos = [WIDTH / 2, HEIGHT / 2]
    ball_vel = [0, 0]
    if direction == RIGHT:
        ball_vel = [random.randrange(2,4), -random.randrange(1, 3)]
        
    elif direction == LEFT:
        ball_vel = [-random.randrange(2,4), -random.randrange(1,3)]
         
# define event handlers
def new_game():
    global paddle1_top,paddle1_bottom, paddle2_bottom, paddle2_top, paddle1_vel, paddle2_vel, RIGHT, LEFT  # these are numbers
    global player1_score, player2_score    
    paddle1_top = [HALF_PAD_WIDTH, (HEIGHT / 2 + PAD_HEIGHT / 2)]
    paddle1_bottom =[HALF_PAD_WIDTH, (HEIGHT / 2 - PAD_HEIGHT / 2)]
    paddle2_top = [WIDTH - HALF_PAD_WIDTH, (HEIGHT / 2 + PAD_HEIGHT / 2)]
    paddle2_bottom = [WIDTH -HALF_PAD_WIDTH,(HEIGHT / 2 - PAD_HEIGHT / 2)]
    paddle1_vel = paddle2_vel = 0
    player1_score = 0
    player2_score = 0
    
    if RIGHT == True:
        RIGHT = False
        LEFT = True
        spawn_ball(RIGHT)
    else:
        LEFT = False
        RIGHT = True
        spawn_ball(LEFT)
    
    music.play()
        
def draw(canvas):
    # globals, globals everywhere
    global player1_score, player2_score, paddle2_vel, ball_pos, ball_vel, paddle1_pos, paddle2_pos
    global paddle1_vel, paddle1_top, paddle1_bottom, paddle2_top, paddle2_bottom
         
    # draw mid line and gutters
    canvas.draw_line([WIDTH / 2, 0],[WIDTH / 2, HEIGHT], 1, "White")
    canvas.draw_line([PAD_WIDTH, 0],[PAD_WIDTH, HEIGHT], 1, "White")
    canvas.draw_line([WIDTH - PAD_WIDTH, 0],[WIDTH - PAD_WIDTH, HEIGHT], 1, "White")
        
    # update ball
    ball_pos[0] += ball_vel[0]
    ball_pos[1] += ball_vel[1]
    
    #bounce off top and bottom
    if ball_pos[1] >= HEIGHT -1 - BALL_RADIUS or ball_pos[1] <= BALL_RADIUS:
        ball_vel[1] = -ball_vel[1]
        pong
      
    # draw ball
    canvas.draw_circle(ball_pos, BALL_RADIUS, 1, "White", "White")
    
    # update paddle's vertical position, keep paddles on the screen
    
        # paddle1
    if paddle1_top[1] + paddle1_vel >= PAD_HEIGHT and paddle1_bottom[1] + paddle1_vel <= HEIGHT - PAD_HEIGHT: 
        paddle1_top[1] += paddle1_vel
        paddle1_bottom[1] += paddle1_vel
        
        #paddle2
    if paddle2_top[1] + paddle2_vel >= PAD_HEIGHT and paddle2_bottom[1] + paddle2_vel <= HEIGHT - PAD_HEIGHT: 
        paddle2_top[1] += paddle2_vel
        paddle2_bottom[1] += paddle2_vel
        
    # draw paddles
    canvas.draw_line(paddle1_top, paddle1_bottom, PAD_WIDTH, "White")
    canvas.draw_line(paddle2_top, paddle2_bottom, PAD_WIDTH, "White")
    
    # determine whether paddle and ball collide
    
        # paddle1 reflect
    if (ball_pos[0] - BALL_RADIUS) <= PAD_WIDTH and ball_pos[1] <= paddle1_top[1] and ball_pos[1] >= paddle1_bottom[1]:
        ball_vel[0] = -(ball_vel[0] + ball_vel[0] * 1/10)
        pong
        
        # player2 SCORE!
    elif ball_pos[0] - BALL_RADIUS <= PAD_WIDTH - 1:
        player2_score +=1
        spawn_ball(RIGHT)
        
        # paddle2 reflect
    if ball_pos[0] + BALL_RADIUS >= WIDTH - PAD_WIDTH and ball_pos[1] <= paddle2_top[1] and ball_pos[1] >= paddle2_bottom[1]:
        ball_vel[0] = -(ball_vel[0] + ball_vel[0] * 1/10)
        pong.play()
        
        # player1 SCORE!
    elif ball_pos[0] + BALL_RADIUS >= WIDTH - PAD_WIDTH:
        player1_score += 1
        spawn_ball(LEFT)
        
    # draw scores
    canvas.draw_text(str(player1_score), (WIDTH * 2/5 - 25, HEIGHT / 10), 30, "White")
    canvas.draw_text(str(player2_score), (WIDTH * 3/5, HEIGHT /10), 30, "White")
    
    # score sound effect every 3 points. An effect I ripped off a CodeSkultor example for sound :)
    # I can't think of an easy way to just have it play once after a point instead of while...
    # ...also if you're reading this I don't know why the 'pong' sound doesn't play all the time
    if player1_score > 0 and player1_score % 3 == 0 or player2_score > 0 and player2_score % 3 == 0:
        laugh.play()
        
    # key handlers   
def keydown(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP['w']:
        paddle1_vel = -10
        
    if key == simplegui.KEY_MAP['s']:
        paddle1_vel = 10
        
    if key == simplegui.KEY_MAP['up']:
        paddle2_vel = -10
        
    if key == simplegui.KEY_MAP['down']:
        paddle2_vel = 10
                                  
def keyup(key):
    global paddle1_vel, paddle2_vel
    if key == simplegui.KEY_MAP['w']:
        paddle1_vel = 0
        
    if key == simplegui.KEY_MAP['s']:
        paddle1_vel = 0
        
    if key == simplegui.KEY_MAP['up']:
        paddle2_vel = 0
        
    if key == simplegui.KEY_MAP['down']:
        paddle2_vel = 0
                             
def reset_handler():
    new_game()

# create frame
frame = simplegui.create_frame("Pong", WIDTH, HEIGHT)
frame.set_draw_handler(draw)
frame.set_keydown_handler(keydown)
frame.set_keyup_handler(keyup)
frame.add_button("Reset", reset_handler)

pong = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/week7-button.m4a")
music = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/Epoq-Lepidoptera.ogg")
laugh = simplegui.load_sound("http://commondatastorage.googleapis.com/codeskulptor-assets/Evillaugh.ogg")
music.set_volume(0.2)
laugh.set_volume(0.1)
pong.set_volume(1.0)

# start frame
new_game()
frame.start()
